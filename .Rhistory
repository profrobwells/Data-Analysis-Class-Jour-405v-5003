error.catching
demo(package = .packages(all.available = TRUE))
error.catching
demo(error.catching)
demo(graphics)
demo(plotmath)
demo(tkdensity)
demo(stats)
stats
library(stats)
demo(stats)
help.start()
objects()
x <- rnorm(50)
y <- rnorm(x)
plot(x, y)
head(rnorm)
View(rnorm)
View(C_rnorm)
knitr::opts_chunk$set(echo = TRUE)
head(Crime)
summary(Crime)
ls()
rm(x, y)
ls()
x <- 1:20
View(x)
w <- 1 + sqrt(x)/2
dummy <- data.frame(x=x, y= x + rnorm(x)*w)
dummy
fm <- lm(y ~ x, data=dummy)
summary(fm)
knitr::opts_chunk$set(echo = TRUE)
getwd()
setwd("~/Dropbox/Student-Loan-Data-R")
install.packages("tidyverse")
library(tidyverse)
library (readxl)
options(header=FALSE, stringsAsFactors = FALSE,fileEncoding="utf-8")
NationalLoans <- read.csv(file.choose(), stringsAsFactors = FALSE)
View(NationalLoans)
nrow(NationalLoans)
head(NationalLoans)
summary(NationalLoans)
LoansOverview <- as.data.frame(summary(NationalLoans))
View(NationalLoans)
View(LoansOverview)
View(NationalLoans)
library(ggplot2)
StudentDebt_chart <- ggplot(NationalLoans, aes(x = State, y=TotalDisbursements_Mil.)) +
geom_bar(stat = "identity") +
coord_flip() +     #this makes it a horizontal bar chart instead of vertical
labs(title = "Total disbursements U.S. colleges, grants and loans 2017",
subtitle = "2017 data. Source: U.S. Department of Education. https://studentaid.ed.gov/sa/about/data-center/student/title-iv ",
caption = "Graphic by Rob Wells",
x="State",
y="All grants and loans disbursed in 2017. ")
plot(StudentDebt_chart)
NationalLoans <- NationalLoans[order(-NationalLoans$TotalDisbursements_Mil.),]
StudentDebt_chart <- ggplot(NationalLoans, aes(x = State, y=TotalDisbursements_Mil.)) +
geom_bar(stat = "identity") +
coord_flip() +     #this makes it a horizontal bar chart instead of vertical
labs(title = "Total disbursements U.S. colleges, grants and loans 2017",
subtitle = "2017 data. Source: U.S. Department of Education. https://studentaid.ed.gov/sa/about/data-center/student/title-iv ",
caption = "Graphic by Rob Wells",
x="State",
y="All grants and loans disbursed in 2017. ")
plot(StudentDebt_chart)
View(LoansOverview)
HighLoans%>%select(State, TotalDisbursements_Mil.)%>%filter(TotalDisbursements_Mil. > 2283.0)
NationalLoans%>%select(State, TotalDisbursements_Mil.)%>%filter(TotalDisbursements_Mil. > 2283.0)
NationalLoans%>%select(State, TotalDisbursements_Mil.)%>%filter(TotalDisbursements_Mil. < 2283.0)
NationalLoans$Per100000students <- ((NationalLoans$TotalRecipients_Thousands * .001) /  NationalLoans$TotalDisbursements_Mil.)*100000
View(NationalLoans)
summary(NationalLoans$Per100000students)
mean((NationalLoans$Per100000students)
)
mean(NationalLoans$Per100000students)
NationalLoans%>%select(State, Per100000students)%>%filter(Per100000students > 9.84626)
NationalLoans[order(-NationalLoans$Per100000students),]
NationalLoans%>%select(State, Per100000students)%>%filter(Per100000students > 9.84626)
NationalLoans[order(-NationalLoans$Per100000students),]
View(NationalLoans)
NationalLoans%>%select(State, Per100000students)%>%filter(Per100000students > 9.84626)
NationalLoans[order(-NationalLoans$Per100000students),]
View(NationalLoans)
?(order)
help(order)
NationalLoans%>%select(State, Per100000students)%>%filter(Per100000students > 9.84626)
NationalLoans[order(-Per100000students),]
View(NationalLoans)
head(NationalLoans)
glimpse(NationalLoans)
NationalLoans[order(-Per100000students),]
NationalLoans[order(-NationalLoans$Per100000students),]
View(NationalLoans)
NationalLoans(state, [order(-NationalLoans$Per100000students),])
#for importing csv file
library(readr)
#for analysis
library(dplyr)
#for creating charts
library(ggplot2)
#for working with dates
library(lubridate)
#themes for data viz
library(ggthemes)
options(header=FALSE, stringsAsFactors = FALSE,fileEncoding="utf-8")
StudentLoan2015_16_2 <- read.csv(file.choose(), stringsAsFactors = FALSE)
glimpse(StudentLoan2015_16_2)
StudentLoan2015_16 <- read_csv("~/Dropbox/Student-Loan-Data-R/CollegeScorecard_Raw_Data-Documentation/MERGED2015_16_PP.csv", col_names = TRUE, col_types = NULL)
glimpse(StudentLoan2015_16)
head(StudentLoan2015_16_2)
options(header=FALSE, stringsAsFactors = FALSE,fileEncoding="utf-8")
StudentLoan2015_16 <- read.csv(file.choose(), stringsAsFactors = FALSE)
#Glimpse - View Table
glimpse(StudentLoan2015_16)
### How many rows?
nrow(StudentLoan2015_16)
### How many columns?
ncol(StudentLoan2015_16_2)
### How many columns?
ncol(StudentLoan2015_16_2)
### How many columns?
ncol(StudentLoan2015_16)
### Let's look at the first six rows
head(StudentLoan2015_16)
#This worked: 92 observations
df1 <- filter(StudentLoan2015_16, STABBR=="AR")
### How many rows?
nrow(df1)
### How many columns?
ncol(df1)
#Rename as Arkansas-2016-Master  - doesn't work: a dash in a name!
#AR2016ALL Works!
AR2016ALL <- df1
subset <- select(AR2016ALL, INSTNM:HCM2)
ncol(subset)
View(subset)
View(StudentLoan2015_16)
#Export the table to Excel or Tableau
write.csv(subset,"subset.csv")
setwd("~/Dropbox/Classes/Data-Analysis-Class-Jour-405v-5003")
text <- c("Because I could not stop for Death -",
"He kindly stopped for me -",
"The Carriage held but just Ourselves -",
"and Immortality")
text
library(dplyr)
text_df <- data_frame(line = 1:4, text = text)
text_df
library(tidytext)
text_df %>%
unnest_tokens(word, text)
library(janeaustenr)
library(dplyr)
library(stringr)
original_books <- austen_books() %>%
group_by(book) %>%
mutate(linenumber = row_number(),
chapter = cumsum(str_detect(text, regex("^chapter [\\divxlc]",
ignore_case = TRUE)))) %>%
ungroup()
original_books
library(tidytext)
tidy_books <- original_books %>%
unnest_tokens(word, text)
tidy_books
data(stop_words)
tidy_books <- tidy_books %>%
anti_join(stop_words)
data()
stop_words
View(stop_words)
tidy_books %>%
count(word, sort = TRUE)
janeaustenr::austen_books()
austen_books()
austen <- austen_books()
View(austen)
library(ggplot2)
tidy_books %>%
count(word, sort = TRUE) %>%
filter(n > 600) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col() +
xlab(NULL) +
coord_flip()
library(gutenbergr)
hgwells <- gutenberg_download(c(35, 36, 5230, 159))
library(gutenbergr)
#Word frequencies
install.packages("gutenbergr")
library(gutenbergr)
hgwells <- gutenberg_download(c(35, 36, 5230, 159))
tidy_hgwells <- hgwells %>%
unnest_tokens(word, text) %>%
anti_join(stop_words)
tidy_hgwells %>%
count(word, sort = TRUE)
#Bronte
bronte <- gutenberg_download(c(1260, 768, 969, 9182, 767))
tidy_bronte <- bronte %>%
unnest_tokens(word, text) %>%
anti_join(stop_words)
tidy_bronte %>%
count(word, sort = TRUE)
library(tidyr)
frequency <- bind_rows(mutate(tidy_bronte, author = "Brontë Sisters"),
mutate(tidy_hgwells, author = "H.G. Wells"),
mutate(tidy_books, author = "Jane Austen")) %>%
mutate(word = str_extract(word, "[a-z']+")) %>%
count(author, word) %>%
group_by(author) %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(author, proportion) %>%
gather(author, proportion, `Brontë Sisters`:`H.G. Wells`)
View(frequency)
library(scales)
# expect a warning about rows with missing values being removed
ggplot(frequency, aes(x = proportion, y = `Jane Austen`, color = abs(`Jane Austen` - proportion))) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 2.5, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = percent_format()) +
scale_y_log10(labels = percent_format()) +
scale_color_gradient(limits = c(0, 0.001), low = "darkslategray4", high = "gray75") +
facet_wrap(~author, ncol = 2) +
theme(legend.position="none") +
labs(y = "Jane Austen", x = NULL)
cor.test(data = frequency[frequency$author == "Brontë Sisters",],
~ proportion + `Jane Austen`)
cor.test(data = frequency[frequency$author == "H.G. Wells",],
~ proportion + `Jane Austen`)
#HG Wells
wittgenstein <- gutenberg_download(5740)
#HG Wells
wittgenstein <- gutenberg_download(c(5740))
library(gutenbergr)
wittgenstein <- gutenberg_download(c(5740))
View(wittgenstein)
options(header=FALSE, stringsAsFactors = FALSE,fileEncoding="utf-8")
wittgenstein <- read.csv(file.choose(), stringsAsFactors = FALSE)
View(wittgenstein)
View(wittgenstein)
View(hgwells)
#Rename a specific column
colnames(wittgenstein)[1] <- "text"
tidy_wittgenstein <- wittgenstein %>%
unnest_tokens(word, text) %>%
anti_join(stop_words)
View(tidy_wittgenstein)
View(tidy_hgwells)
tidy_wittgenstein %>%
count(word, sort = TRUE)
tidy_wittgenstein %>%
count(word, sort = TRUE) %>%
filter(n > 200) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col() +
xlab(NULL) +
coord_flip()
#rio
install.packages("rio")
install.packages("rio")
ArkCo_Income_2017 <- rio::import("ArkCo_Income_2017.csv")
ArkCo_Income_2017 <- rio::import("/Data/ArkCo_Income_2017.csv")
ArkCo_Income_2017 <- rio::import("Data/ArkCo_Income_2017.csv")
#Look at the table
View(ArkCo_Income_2017)
# How many rows?
nrow(ArkCo_Income_2017)
# How many columns?
ncol(ArkCo_Income_2017)
#Check data types
glimpse(ArkCo_Income_2017)
??glimpse
??tibble
??glimpse
library (tibble)
#Check data types
glimpse(ArkCo_Income_2017)
#Delete First Row Headers
ArkCo_Income_2017 <- ArkCo_Income_2017 [-c(1)]
View(ArkCo_Income_2017)
#Load Data
ArkCo_Income_2017 <- rio::import("Data/ArkCo_Income_2017.csv", skip=1)
#Look at the table
View(ArkCo_Income_2017)
glimpse(ArkCo_Income_2017)
#rio
install.packages("rio")
install.packages("rio")
install.packages("rio")
install.packages("rio")
#Load Data
ArkCo_Income_2017 <- rio::import("Data/ArkCo_Income_2017.csv", skip=1)
#Look at the table
View(ArkCo_Income_2017)
#Load Data
ArkCo_Income_2017 <- rio::import("Data/ArkCo_Income_2017.csv")
#Look at the table
View(ArkCo_Income_2017)
# How many rows?
nrow(ArkCo_Income_2017)
# How many columns?
ncol(ArkCo_Income_2017)
#Install tibble for the glimpse function
library (tibble)
#Check data types
glimpse(ArkCo_Income_2017)
#run stats
summary(ArkCo_Income_2017)
#Delete First Row Headers
#read.csv(.... , skip=1)
ArkCo_Income_2017 <- rio::import("Data/ArkCo_Income_2017.csv", skip=1)
#run stats
summary(ArkCo_Income_2017)
ArkCo_Income2_2017_copy <- rio::import("Data/ArkCo_Income2_2017_copy.csv", skip=1)
glimpse(ArkCo_Income2_2017_copy)
glimpse(ArkCo_Income_2017)
StudentLoans <- rio::import("AR2016_SMALL.csv")
View(StudentLoans)
glimpse(StudentLoans)
# Number columns
ncol(StudentLoans)
View(StudentLoans)
View(StudentLoans)
#Convert numbers to "numeric" data
#We want to turn all columns after HMC2 into numeric
#HMC2 is Column #9
StudentLoans <- lapply(StudentLoans[9:102], as.numeric)
View(StudentLoans)
StudentLoans <- rio::import("AR2016_SMALL.csv")
glimpse(StudentLoans)
#Convert numbers to "numeric" data
#We want to turn all columns after HMC2 into numeric
#HMC2 is Column #9
StudentLoans[9:102] <- lapply(StudentLoans[9:102], as.numeric)
View(StudentLoans)
glimpse(StudentLoans)
mean(StudentLoans$UGDS_WHITE)
mean(StudentLoans$UGDS_WHITE)
ncol(StudentLoans)
mean(StudentLoans$UGDS_WHITE)
sum(StudentLoans$UGDS_WHITE)
#Convert numbers to "numeric" data
#We want to turn all columns after HMC2 into numeric
#HMC2 is Column #9
StudentLoans[9:102] <- lapply(StudentLoans[9:102], as.numeric)
glimpse(StudentLoans)
sum(StudentLoans$UGDS_WHITE)
StudentLoans$UGDS_WHITE <- as.numeric(StudentLoans$UGDS_WHITE)
glimpse(StudentLoans)
sum(StudentLoans$UGDS_WHITE)
sum(StudentLoans$UGDS_WHITE, na.rm=TRUE)
summary(StudentLoans)
mean(StudentLoans$TUITIONFEE_IN, na.rm=TRUE)
#Do some math - average number of white students
mean(StudentLoans$UGDS_WHITE)
StudentLoans[!complete.cases(StudentLoans)]
#Clean Headers - Janitor package
library(janitor)
# Clean up column names to they are R friendly
ArkCo_Income_2017 <- janitor::clean_names(ArkCo_Income_2017)
View(ArkCo_Income_2017)
colnames(ArkCo_Income_2017)
# Still need to fix column names
colnames(ArkCo_Income_2017)
#Assign the column names to a variable
oldnames <- colnames(ArkCo_Income_2017)
oldnames
#New Names
library(data.table)
setnames(ArkCo_Income_2017, old = c('id', 'id2', 'geography', 'households_estimate_total',
'households_estimate_less_than_10_000', 'households_estimate_10_000_to_14_999',
'households_estimate_15_000_to_24_999', 'households_estimate_25_000_to_34_999',
'households_estimate_35_000_to_49_999', 'households_estimate_50_000_to_74_999',
'households_estimate_75_000_to_99_999', 'households_estimate_100_000_to_149_999',
'households_estimate_150_000_to_199_999', 'households_estimate_200_000_or_more',
'households_estimate_median_income_dollars', 'households_estimate_mean_income_dollars',
'households_estimate_percent_allocated_household_income_in_the_past_12_months',
'households_estimate_percent_allocated_family_income_in_the_past_12_months',
'households_estimate_percent_allocated_nonfamily_income_in_the_past_12_months'), new= c('id', 'id2', 'geography', 'households_estimate_total','less10_000','10k_to_14_999', '15k_to_24_999',
'25k_to_34_999', '35k_to_49_999', '50k_to_74_999', '75k_to_99_999', '100k_to_149_999'. '150k_to_199_999',
'200k_plus','median_income', 'mean_income', 'pct_allocated_household_income', 'pct_allocated_family_income',
'pct_allocated_nonfamily_income')
# Still need to fix column names
colnames(ArkCo_Income_2017)
setnames(ArkCo_Income_2017, old = c('id', 'id2', 'geography', 'households_estimate_total',
'households_estimate_less_than_10_000', 'households_estimate_10_000_to_14_999',
'households_estimate_15_000_to_24_999', 'households_estimate_25_000_to_34_999',
'households_estimate_35_000_to_49_999', 'households_estimate_50_000_to_74_999',
'households_estimate_75_000_to_99_999', 'households_estimate_100_000_to_149_999',
'households_estimate_150_000_to_199_999', 'households_estimate_200_000_or_more',
'households_estimate_median_income_dollars', 'households_estimate_mean_income_dollars',
'households_estimate_percent_allocated_household_income_in_the_past_12_months',
'households_estimate_percent_allocated_family_income_in_the_past_12_months',
'households_estimate_percent_allocated_nonfamily_income_in_the_past_12_months'),
new= c('id', 'id2', 'geography', 'households_estimate_total','less10_000','10k_to_14_999', '15k_to_24_999',
'25k_to_34_999', '35k_to_49_999', '50k_to_74_999', '75k_to_99_999', '100k_to_149_999'. '150k_to_199_999',
'200k_plus','median_income', 'mean_income', 'pct_allocated_household_income', 'pct_allocated_family_income',
'pct_allocated_nonfamily_income')
setnames(ArkCo_Income_2017, old = c('id', 'id2', 'geography', 'households_estimate_total',
'households_estimate_less_than_10_000', 'households_estimate_10_000_to_14_999',
'households_estimate_15_000_to_24_999', 'households_estimate_25_000_to_34_999',
'households_estimate_35_000_to_49_999', 'households_estimate_50_000_to_74_999',
'households_estimate_75_000_to_99_999', 'households_estimate_100_000_to_149_999',
'households_estimate_150_000_to_199_999', 'households_estimate_200_000_or_more',
'households_estimate_median_income_dollars', 'households_estimate_mean_income_dollars',
'households_estimate_percent_allocated_household_income_in_the_past_12_months',
'households_estimate_percent_allocated_family_income_in_the_past_12_months',
'households_estimate_percent_allocated_nonfamily_income_in_the_past_12_months'),
new = c('id', 'id2', 'geography', 'households_estimate_total','less10_000','10k_to_14_999', '15k_to_24_999',
'25k_to_34_999', '35k_to_49_999', '50k_to_74_999', '75k_to_99_999', '100k_to_149_999'. '150k_to_199_999',
'200k_plus','median_income', 'mean_income', 'pct_allocated_household_income', 'pct_allocated_family_income',
'pct_allocated_nonfamily_income')
setnames(ArkCo_Income_2017, old = c('id', 'id2', 'geography', 'households_estimate_total',
'households_estimate_less_than_10_000', 'households_estimate_10_000_to_14_999',
'households_estimate_15_000_to_24_999', 'households_estimate_25_000_to_34_999',
'households_estimate_35_000_to_49_999', 'households_estimate_50_000_to_74_999',
'households_estimate_75_000_to_99_999', 'households_estimate_100_000_to_149_999',
'households_estimate_150_000_to_199_999', 'households_estimate_200_000_or_more',
'households_estimate_median_income_dollars', 'households_estimate_mean_income_dollars',
'households_estimate_percent_allocated_household_income_in_the_past_12_months',
'households_estimate_percent_allocated_family_income_in_the_past_12_months',
'households_estimate_percent_allocated_nonfamily_income_in_the_past_12_months'),
new = c('id', 'id2', 'geography', 'households_estimate_total','less10_000','10k_to_14_999', '15k_to_24_999',
'25k_to_34_999', '35k_to_49_999', '50k_to_74_999', '75k_to_99_999', '100k_to_149_999'. '150k_to_199_999',
'200k_plus','median_income', 'mean_income', 'pct_allocated_household_income',
'pct_allocated_family_income','pct_allocated_nonfamily_income')
setnames(ArkCo_Income_2017, old = c('id', 'id2', 'geography', 'households_estimate_total',
'households_estimate_less_than_10_000', 'households_estimate_10_000_to_14_999',
'households_estimate_15_000_to_24_999', 'households_estimate_25_000_to_34_999',
'households_estimate_35_000_to_49_999', 'households_estimate_50_000_to_74_999',
'households_estimate_75_000_to_99_999', 'households_estimate_100_000_to_149_999',
'households_estimate_150_000_to_199_999', 'households_estimate_200_000_or_more',
'households_estimate_median_income_dollars', 'households_estimate_mean_income_dollars',
'households_estimate_percent_allocated_household_income_in_the_past_12_months',
'households_estimate_percent_allocated_family_income_in_the_past_12_months',
'households_estimate_percent_allocated_nonfamily_income_in_the_past_12_months'),
new = c('id', 'id2', 'geography', 'households_estimate_total','less10_000','10k_to_14_999', '15k_to_24_999',
'25k_to_34_999', '35k_to_49_999', '50k_to_74_999', '75k_to_99_999', '100k_to_149_999'. '150k_to_199_999',
'200k_plus','median_income', 'mean_income', 'pct_allocated_household_income','pct_allocated_family_income','pct_allocated_nonfamily_income')
setnames(ArkCo_Income_2017, old = c('id', 'id2', 'geography', 'households_estimate_total',
'households_estimate_less_than_10_000', 'households_estimate_10_000_to_14_999',
'households_estimate_15_000_to_24_999', 'households_estimate_25_000_to_34_999',
'households_estimate_35_000_to_49_999', 'households_estimate_50_000_to_74_999',
'households_estimate_75_000_to_99_999', 'households_estimate_100_000_to_149_999',
'households_estimate_150_000_to_199_999', 'households_estimate_200_000_or_more',
'households_estimate_median_income_dollars', 'households_estimate_mean_income_dollars',
'households_estimate_percent_allocated_household_income_in_the_past_12_months',
'households_estimate_percent_allocated_family_income_in_the_past_12_months',
'households_estimate_percent_allocated_nonfamily_income_in_the_past_12_months'),
new = c('id', 'id2', 'geography', 'households_estimate_total','less10_000','10k_to_14_999', '15k_to_24_999',
'25k_to_34_999', '35k_to_49_999', '50k_to_74_999', '75k_to_99_999', '100k_to_149_999'. '150k_to_199_999','200k_plus','median_income', 'mean_income', 'pct_allocated_household_income','pct_allocated_family_income','pct_allocated_nonfamily_income')
setnames(ArkCo_Income_2017, old = c('id', 'id2', 'geography', 'households_estimate_total',
'households_estimate_less_than_10_000', 'households_estimate_10_000_to_14_999',
'households_estimate_15_000_to_24_999', 'households_estimate_25_000_to_34_999',
'households_estimate_35_000_to_49_999', 'households_estimate_50_000_to_74_999',
'households_estimate_75_000_to_99_999', 'households_estimate_100_000_to_149_999',
'households_estimate_150_000_to_199_999', 'households_estimate_200_000_or_more',
'households_estimate_median_income_dollars', 'households_estimate_mean_income_dollars',
'households_estimate_percent_allocated_household_income_in_the_past_12_months',
'households_estimate_percent_allocated_family_income_in_the_past_12_months',
'households_estimate_percent_allocated_nonfamily_income_in_the_past_12_months'),
new = c('id', 'id2', 'geography', 'households_estimate_total','less10_000','10k_to_14_999', '15k_to_24_999',
'25k_to_34_999', '35k_to_49_999', '50k_to_74_999', '75k_to_99_999', '100k_to_149_999'. '150k_to_199_999','200k_plus','median_income', 'mean_income', 'pct_allocated_household_income','pct_allocated_family_income','pct_allocated_nonfamily_income'))
setnames(ArkCo_Income_2017, old = c('id', 'id2', 'geography', 'households_estimate_total',
'households_estimate_less_than_10_000', 'households_estimate_10_000_to_14_999',
'households_estimate_15_000_to_24_999', 'households_estimate_25_000_to_34_999',
'households_estimate_35_000_to_49_999', 'households_estimate_50_000_to_74_999',
'households_estimate_75_000_to_99_999', 'households_estimate_100_000_to_149_999',
'households_estimate_150_000_to_199_999', 'households_estimate_200_000_or_more',
'households_estimate_median_income_dollars', 'households_estimate_mean_income_dollars',
'households_estimate_percent_allocated_household_income_in_the_past_12_months',
'households_estimate_percent_allocated_family_income_in_the_past_12_months',
'households_estimate_percent_allocated_nonfamily_income_in_the_past_12_months'),
new = c('id','id2','geography','households_estimate_total','less10_000','10k_to_14_999','15k_to_24_999',
'25k_to_34_999', '35k_to_49_999','50k_to_74_999','75k_to_99_999','100k_to_149_999',
'150k_to_199_999','200k_plus','median_income','mean_income',
'pct_allocated_household_income','pct_allocated_family_income','pct_allocated_nonfamily_income'))
0
# Still need to fix column names
colnames(ArkCo_Income_2017)
View(ArkCo_Income_2017)
