error.catching
demo(package = .packages(all.available = TRUE))
error.catching
demo(error.catching)
demo(graphics)
demo(plotmath)
demo(tkdensity)
demo(stats)
stats
library(stats)
demo(stats)
help.start()
objects()
x <- rnorm(50)
y <- rnorm(x)
plot(x, y)
head(rnorm)
View(rnorm)
View(C_rnorm)
knitr::opts_chunk$set(echo = TRUE)
head(Crime)
summary(Crime)
ls()
rm(x, y)
ls()
x <- 1:20
View(x)
w <- 1 + sqrt(x)/2
dummy <- data.frame(x=x, y= x + rnorm(x)*w)
dummy
fm <- lm(y ~ x, data=dummy)
summary(fm)
knitr::opts_chunk$set(echo = TRUE)
getwd()
setwd("~/Dropbox/Student-Loan-Data-R")
install.packages("tidyverse")
library(tidyverse)
library (readxl)
options(header=FALSE, stringsAsFactors = FALSE,fileEncoding="utf-8")
NationalLoans <- read.csv(file.choose(), stringsAsFactors = FALSE)
View(NationalLoans)
nrow(NationalLoans)
head(NationalLoans)
summary(NationalLoans)
LoansOverview <- as.data.frame(summary(NationalLoans))
View(NationalLoans)
View(LoansOverview)
View(NationalLoans)
library(ggplot2)
StudentDebt_chart <- ggplot(NationalLoans, aes(x = State, y=TotalDisbursements_Mil.)) +
geom_bar(stat = "identity") +
coord_flip() +     #this makes it a horizontal bar chart instead of vertical
labs(title = "Total disbursements U.S. colleges, grants and loans 2017",
subtitle = "2017 data. Source: U.S. Department of Education. https://studentaid.ed.gov/sa/about/data-center/student/title-iv ",
caption = "Graphic by Rob Wells",
x="State",
y="All grants and loans disbursed in 2017. ")
plot(StudentDebt_chart)
NationalLoans <- NationalLoans[order(-NationalLoans$TotalDisbursements_Mil.),]
StudentDebt_chart <- ggplot(NationalLoans, aes(x = State, y=TotalDisbursements_Mil.)) +
geom_bar(stat = "identity") +
coord_flip() +     #this makes it a horizontal bar chart instead of vertical
labs(title = "Total disbursements U.S. colleges, grants and loans 2017",
subtitle = "2017 data. Source: U.S. Department of Education. https://studentaid.ed.gov/sa/about/data-center/student/title-iv ",
caption = "Graphic by Rob Wells",
x="State",
y="All grants and loans disbursed in 2017. ")
plot(StudentDebt_chart)
View(LoansOverview)
HighLoans%>%select(State, TotalDisbursements_Mil.)%>%filter(TotalDisbursements_Mil. > 2283.0)
NationalLoans%>%select(State, TotalDisbursements_Mil.)%>%filter(TotalDisbursements_Mil. > 2283.0)
NationalLoans%>%select(State, TotalDisbursements_Mil.)%>%filter(TotalDisbursements_Mil. < 2283.0)
NationalLoans$Per100000students <- ((NationalLoans$TotalRecipients_Thousands * .001) /  NationalLoans$TotalDisbursements_Mil.)*100000
View(NationalLoans)
summary(NationalLoans$Per100000students)
mean((NationalLoans$Per100000students)
)
mean(NationalLoans$Per100000students)
NationalLoans%>%select(State, Per100000students)%>%filter(Per100000students > 9.84626)
NationalLoans[order(-NationalLoans$Per100000students),]
NationalLoans%>%select(State, Per100000students)%>%filter(Per100000students > 9.84626)
NationalLoans[order(-NationalLoans$Per100000students),]
View(NationalLoans)
NationalLoans%>%select(State, Per100000students)%>%filter(Per100000students > 9.84626)
NationalLoans[order(-NationalLoans$Per100000students),]
View(NationalLoans)
?(order)
help(order)
NationalLoans%>%select(State, Per100000students)%>%filter(Per100000students > 9.84626)
NationalLoans[order(-Per100000students),]
View(NationalLoans)
head(NationalLoans)
glimpse(NationalLoans)
NationalLoans[order(-Per100000students),]
NationalLoans[order(-NationalLoans$Per100000students),]
View(NationalLoans)
NationalLoans(state, [order(-NationalLoans$Per100000students),])
#for importing csv file
library(readr)
#for analysis
library(dplyr)
#for creating charts
library(ggplot2)
#for working with dates
library(lubridate)
#themes for data viz
library(ggthemes)
options(header=FALSE, stringsAsFactors = FALSE,fileEncoding="utf-8")
StudentLoan2015_16_2 <- read.csv(file.choose(), stringsAsFactors = FALSE)
glimpse(StudentLoan2015_16_2)
StudentLoan2015_16 <- read_csv("~/Dropbox/Student-Loan-Data-R/CollegeScorecard_Raw_Data-Documentation/MERGED2015_16_PP.csv", col_names = TRUE, col_types = NULL)
glimpse(StudentLoan2015_16)
head(StudentLoan2015_16_2)
options(header=FALSE, stringsAsFactors = FALSE,fileEncoding="utf-8")
StudentLoan2015_16 <- read.csv(file.choose(), stringsAsFactors = FALSE)
#Glimpse - View Table
glimpse(StudentLoan2015_16)
### How many rows?
nrow(StudentLoan2015_16)
### How many columns?
ncol(StudentLoan2015_16_2)
### How many columns?
ncol(StudentLoan2015_16_2)
### How many columns?
ncol(StudentLoan2015_16)
### Let's look at the first six rows
head(StudentLoan2015_16)
#This worked: 92 observations
df1 <- filter(StudentLoan2015_16, STABBR=="AR")
### How many rows?
nrow(df1)
### How many columns?
ncol(df1)
#Rename as Arkansas-2016-Master  - doesn't work: a dash in a name!
#AR2016ALL Works!
AR2016ALL <- df1
subset <- select(AR2016ALL, INSTNM:HCM2)
ncol(subset)
View(subset)
View(StudentLoan2015_16)
#Export the table to Excel or Tableau
write.csv(subset,"subset.csv")
library(here)
setwd("~/Dropbox/Classes/Data-Analysis-Class-Jour-405v-5003")
here()
here()
library(here)
here("charts")
here()
here()
library("here")
library (tidyverse)
library (readxl)
library (dplyr)
library(rio)
library(janitor)
download.file("https://bit.ly/2suDbt8", "ArkCensus.csv")
getwd()
options(header=FALSE, stringsAsFactors = FALSE,fileEncoding="utf-8")
ArkCensus <- read.csv(file.choose(), stringsAsFactors = FALSE)
View(ArkCensus)
ArkCensus <- rio::import("ArkCensus.csv")
View(ArkCensus)
download.file("https://bit.ly/2suDbt8", "ArkCensus.csv", mode=‘wb’)
download.file("https://bit.ly/2suDbt8", "ArkCensus.csv")
download.file("https://bit.ly/2FxLJHj", "ArkCensus.csv")
ArkCensus <- rio::import("ArkCensus.csv")
View(ArkCensus)
options(header=FALSE, stringsAsFactors = FALSE,fileEncoding="utf-8")
ArkCensus1 <- read.csv(file.choose(), stringsAsFactors = FALSE)
View(ArkCensus1)
#Look at the table
View(ArkCensus)
# How many columns?
ncol(ArkCensus)
# Let's look at the first six rows
head(ArkCensus)
#Check data types
glimpse(ArkCensus)
###Here is a quick way to view the range of your data
summary(ArkCensus)
ArkCensus <- janitor::clean_names(ArkCensus)
View(ArkCensus)
colnames(ArkCensus)[5] <- "BaseEstimate"
ArkCensus$2017-16% <- ((ArkCensus$x2017-ArkCensus$x2016)/ArkCensus$x2016)
ArkCensus$2017_16% <- ((ArkCensus$x2017-ArkCensus$x2016)/(ArkCensus$x2016))
head(ArkCensus)
ArkCensus$2017% <- ((ArkCensus$x2017-ArkCensus$x2016)/(ArkCensus$x2016))
ArkCensus$x2017% <- ((ArkCensus$x2017-ArkCensus$x2016)/(ArkCensus$x2016))
ArkCensus$pct17 <- ((ArkCensus$x2017-ArkCensus$x2016)/(ArkCensus$x2016))
ArkCensus$Pct2017 <- ((ArkCensus$x2017-ArkCensus$x2016)/(ArkCensus$x2016))
ArkCensus <- ArkCensus[order(-ArkCensus$Pct2017),]
View(Census)
ArkCensus <- ArkCensus[order(-ArkCensus$Pct2017),]
View(ArkCensus)
mean(ArkCensus$Pct2017)
ArkCensus$Pct2017 <- ((ArkCensus$x2017-ArkCensus$x2016)/(ArkCensus$x2016)*100)
ArkCensus$Pct2017 <- function(ArkCensus$Pct2017, digits = 2, format = "f", ...) {
paste0(formatC(100 * x, format = format, digits = digits, ...), "%")
}
ArkCensus$Pct2017 <- function(ArkCensus$Pct2017, digits = 2, format = "f", ...)
{
paste0(formatC(100 * x, format = format, digits = digits, ...), "%")
}
library(formattable)
install.packages("formattable")
library(formattable)
ArkCensus$Pct2017 <- percent(ArkCensus$Pct2017)
ArkCensus$Pct2017 <- ((ArkCensus$x2017-ArkCensus$x2016)/(ArkCensus$x2016))
View(ArkCensus)
ArkCensus$Pct2017 <- percent(ArkCensus$Pct2017)
mean(ArkCensus$Pct2017)
Median(ArkCensus$Pct2017)
median(ArkCensus$Pct2017)
Above_Average <- ArkCensus%>%select(county, Pct2017)%>%filter(Pct2017 > -0.09)
View(Above_Average)
mean(ArkCensus$pct17)
mean(ArkCensus$Pct2017)
Above_Average <- ArkCensus%>%select(county, Pct2017)%>%filter(Pct2017 > -9)
Above_Average <- ArkCensus%>%select(county, Pct2017)%>%filter(Pct2017 > -.9)
Above_Average <- ArkCensus%>%select(county, Pct2017)%>%filter(Pct2017 > .01)
Above_Average <- ArkCensus%>%select(county, Pct2017)%>%filter(Pct2017 > .001)
Above_Average <- ArkCensus%>%select(county, Pct2017)%>%filter(Pct2017 > 0)
Above_Average <- ArkCensus%>%select(county, Pct2017)%>%filter(Pct2017 > .01)
Above_Average <- ArkCensus%>%select(county, Pct2017)%>%filter(Pct2017 > .009)
Above_Average <- ArkCensus%>%select(county, Pct2017)%>%filter(Pct2017 > .0099)
Above_Average <- ArkCensus%>%select(county, Pct2017)%>%filter(Pct2017 > .01)
#Build a table with places with upper quantile of crime
quantile(ArkCensus$Pct2017)
# the Upper Quantile is 0.74% to 2.94%
TopGrowth <- ArkCensus%>%select(county, Pct201)%>%filter(Pct201 > 0.74)
# the Upper Quantile is 0.74% to 2.94%
TopGrowth <- ArkCensus%>%select(county, Pct2017)%>%filter(Pct2017 > 0.74)
View(TopGrowth)
# the Upper Quantile is 0.74% to 2.94%
TopGrowth <- ArkCensus%>%select(county, Pct2017)%>%filter(Pct2017 > 0.074)
View(TopGrowth)
# the Upper Quantile is 0.74% to 2.94%
TopGrowth <- ArkCensus%>%select(county, Pct2017)%>%filter(Pct2017 > 0.0074)
View(TopGrowth)
MajorLosers <- ArkCensus%>%select(county, Pct2017)%>%filter(Pct2017 < -0.0093)
View(MajorLosers)
View(TopGrowth)
library(ggplot2)
TopGrowthChart <- ggplot(TopGrowth, aes(x = county, y=Pct2017)) +
geom_bar(stat = "identity") +
coord_flip() +     #this makes it a horizontal bar chart instead of vertical
labs(title = "Your title here",
subtitle = "Subtitle and source ",
caption = "Graphic by Rob Wells",
x="County",
y="Population growth 2016-2017")
plot(TopGrowthChart)
